{"version":3,"sources":["gql/Queries.ts","Pages/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GET_WEATHER_QUERY","gql","Home","useState","citySearched","setCitySearched","a","clientHook","query","variables","name","data","error","message","setData","getCityByName","country","weather","temperature","actual","feelsLike","summary","description","useApolloClient","className","type","placeholder","onChange","event","target","value","onClick","preventDefault","getWeather","parseInt","App","client","ApolloClient","cache","InMemoryCache","uri","ApolloProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAEaA,EAAoBC,YAAH,ygB,OCsDfC,MApDf,WACE,MAAwCC,mBAAiB,IAAzD,mBAAOC,EAAP,KAAqBC,EAArB,KADc,4CAEd,gCAAAC,EAAA,sEACgCC,EAAWC,MAAM,CAC7CA,MAAOR,EACPS,UAAW,CAACC,KAAMN,KAHtB,mBACUO,EADV,EACUA,OAAMC,EADhB,EACgBA,OADhB,gFAKoDA,EAAMC,UAL1D,OAMEC,EAAQH,GANV,4CAFc,sBAUd,MAAwBR,mBAAS,CAC/BY,cAAgB,CACdL,KAAM,GACNM,QAAS,GACTC,QAAS,CACPC,YAAa,CACXC,OAAQ,GACRC,UAAW,IAEbC,QAAS,CACPC,YAAa,QAVrB,mBAAOX,EAAP,KAAaG,EAAb,KAeMP,EAAagB,cACnB,OACE,sBAAKC,UAAU,OAAf,UACE,oBAAIA,UAAU,eAAd,uEACA,uBAAMA,UAAU,eAAhB,UACE,uBAAOA,UAAU,qBAAqBC,KAAK,OAAOC,YAAY,eAAeC,SAAU,SAACC,GACrFvB,EAAgBuB,EAAMC,OAAOC,UAChC,wBAAQN,UAAU,sBAAsBO,QAAS,SAACH,GAChDA,EAAMI,iBAjCA,mCAkCNC,IAFF,uBAKCtB,EAAKI,eAAiBJ,EAAKI,cAAcL,KAC1C,sBAAKc,UAAU,0BAAf,UACE,sBAAKA,UAAU,kBAAf,kCAAsD,4BAAIb,EAAKI,cAAcL,UAC7E,sBAAKc,UAAU,qBAAf,8BAAqD,4BAAIb,EAAKI,cAAcC,aAC5E,sBAAKQ,UAAU,yBAAf,wCAAmE,4BAAIU,SAASvB,EAAKI,cAAcE,QAAQC,YAAYC,QAAU,QACjI,sBAAKK,UAAU,uBAAf,uCAAgE,4BAAIU,SAASvB,EAAKI,cAAcE,QAAQC,YAAYE,WAAa,QACjI,sBAAKI,UAAU,iCAAf,mCAAsE,4BAAIb,EAAKI,cAAcE,QAAQI,QAAQC,oBAE7G,qBAAKE,UAAU,0BAAf,oC,wBChCKW,MAZf,WACE,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,MAAO,IAAIC,IACXC,IAAK,8CAEP,OACE,cAACC,EAAA,EAAD,CAAgBL,OAAQA,EAAxB,SACE,cAAC,EAAD,OCESM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dd9fc566.chunk.js","sourcesContent":["import {gql} from '@apollo/client';\n\nexport const GET_WEATHER_QUERY = gql`\n  query getCityByName($name: String!) {\n    getCityByName(name: $name) {\n      name\n      country\n      weather {\n        summary {\n          title\n          description\n          icon\n        }\n        temperature {\n          actual\n          feelsLike\n          min\n          max\n        }\n        wind {\n          speed\n          deg\n        }\n        clouds {\n          all\n          visibility\n          humidity\n        }\n        timestamp\n      }\n    }\n  }\n`","import React, {useState} from \"react\";\nimport { useApolloClient } from '@apollo/client';\nimport { GET_WEATHER_QUERY } from '../gql/Queries';\n\nfunction Home() {\n  const [citySearched, setCitySearched] = useState<string>('');\n  async function getWeather() {\n    const { data, error } = await clientHook.query({\n      query: GET_WEATHER_QUERY,\n      variables: {name: citySearched},\n    });\n    if (error) return `Error!!! Here's the message: ${error.message}`\n    setData(data);\n  }\n  const [data, setData] = useState({\n    getCityByName:  {\n      name: '',\n      country: '',\n      weather: {\n        temperature: {\n          actual: '',\n          feelsLike: '',\n        },\n        summary: {\n          description: '',\n        }\n      }\n    }\n  });\n  const clientHook = useApolloClient();\n  return (\n    <div className=\"home\">\n      <h1 className=\"home__header\">Find out about the weather in your city! Wow, much useful</h1>\n      <form className=\"home__search\">\n        <input className=\"home__search-input\" type=\"text\" placeholder=\"City name...\" onChange={(event) => \n          {setCitySearched(event.target.value);}}/>\n        <button className=\"home__search-button\" onClick={(event) => {\n          event.preventDefault();\n          getWeather();\n        }}>Search</button>  \n      </form>\n      { (data.getCityByName && data.getCityByName.name) ?\n        <div className=\"home__city-weather-info\">\n          <div className=\"home__city-name\">You've searched for: <b>{data.getCityByName.name}</b></div>\n          <div className=\"home__city-country\">It's country is: <b>{data.getCityByName.country}</b></div>\n          <div className=\"home__city-temperature\">The actual temperature is: <b>{parseInt(data.getCityByName.weather.temperature.actual) / 10}</b></div>\n          <div className=\"home__city-feelslike\">While it feels like it's: <b>{parseInt(data.getCityByName.weather.temperature.feelsLike) / 10}</b></div>\n          <div className=\"home__city-weather-description\">Well, there is (are): <b>{data.getCityByName.weather.summary.description}</b></div>\n        </div>\n        : <div className=\"home__city-weather-info\">There's nothing...</div>\n      }\n      \n    </div>\n  )\n}\n\nexport default Home;","import React from 'react';\nimport './App.scss';\nimport Home from './Pages/Home';\nimport {ApolloClient, InMemoryCache, ApolloProvider} from '@apollo/client';\n\nfunction App() {\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    uri: 'https://graphql-weather-api.herokuapp.com',\n  })\n  return (\n    <ApolloProvider client={client}>\n      <Home />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}